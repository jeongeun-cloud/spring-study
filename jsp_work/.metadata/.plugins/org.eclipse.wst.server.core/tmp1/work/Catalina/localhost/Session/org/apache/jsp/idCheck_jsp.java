/*
 * Generated by the Jasper component of Apache Tomcat
 * Version: Apache Tomcat/8.5.55
 * Generated at: 2020-06-08 02:39:17 UTC
 * Note: The last modified time of this file was set to
 *       the last modified time of the source file after
 *       generation to assist with modification tracking.
 */
package org.apache.jsp;

import javax.servlet.*;
import javax.servlet.http.*;
import javax.servlet.jsp.*;
import jdbc.UserDao;

public final class idCheck_jsp extends org.apache.jasper.runtime.HttpJspBase
    implements org.apache.jasper.runtime.JspSourceDependent,
                 org.apache.jasper.runtime.JspSourceImports {

  private static final javax.servlet.jsp.JspFactory _jspxFactory =
          javax.servlet.jsp.JspFactory.getDefaultFactory();

  private static java.util.Map<java.lang.String,java.lang.Long> _jspx_dependants;

  private static final java.util.Set<java.lang.String> _jspx_imports_packages;

  private static final java.util.Set<java.lang.String> _jspx_imports_classes;

  static {
    _jspx_imports_packages = new java.util.HashSet<>();
    _jspx_imports_packages.add("javax.servlet");
    _jspx_imports_packages.add("javax.servlet.http");
    _jspx_imports_packages.add("javax.servlet.jsp");
    _jspx_imports_classes = new java.util.HashSet<>();
    _jspx_imports_classes.add("jdbc.UserDao");
  }

  private volatile javax.el.ExpressionFactory _el_expressionfactory;
  private volatile org.apache.tomcat.InstanceManager _jsp_instancemanager;

  public java.util.Map<java.lang.String,java.lang.Long> getDependants() {
    return _jspx_dependants;
  }

  public java.util.Set<java.lang.String> getPackageImports() {
    return _jspx_imports_packages;
  }

  public java.util.Set<java.lang.String> getClassImports() {
    return _jspx_imports_classes;
  }

  public javax.el.ExpressionFactory _jsp_getExpressionFactory() {
    if (_el_expressionfactory == null) {
      synchronized (this) {
        if (_el_expressionfactory == null) {
          _el_expressionfactory = _jspxFactory.getJspApplicationContext(getServletConfig().getServletContext()).getExpressionFactory();
        }
      }
    }
    return _el_expressionfactory;
  }

  public org.apache.tomcat.InstanceManager _jsp_getInstanceManager() {
    if (_jsp_instancemanager == null) {
      synchronized (this) {
        if (_jsp_instancemanager == null) {
          _jsp_instancemanager = org.apache.jasper.runtime.InstanceManagerFactory.getInstanceManager(getServletConfig());
        }
      }
    }
    return _jsp_instancemanager;
  }

  public void _jspInit() {
  }

  public void _jspDestroy() {
  }

  public void _jspService(final javax.servlet.http.HttpServletRequest request, final javax.servlet.http.HttpServletResponse response)
      throws java.io.IOException, javax.servlet.ServletException {

    final java.lang.String _jspx_method = request.getMethod();
    if (!"GET".equals(_jspx_method) && !"POST".equals(_jspx_method) && !"HEAD".equals(_jspx_method) && !javax.servlet.DispatcherType.ERROR.equals(request.getDispatcherType())) {
      response.sendError(HttpServletResponse.SC_METHOD_NOT_ALLOWED, "JSP들은 오직 GET, POST 또는 HEAD 메소드만을 허용합니다. Jasper는 OPTIONS 메소드 또한 허용합니다.");
      return;
    }

    final javax.servlet.jsp.PageContext pageContext;
    javax.servlet.http.HttpSession session = null;
    final javax.servlet.ServletContext application;
    final javax.servlet.ServletConfig config;
    javax.servlet.jsp.JspWriter out = null;
    final java.lang.Object page = this;
    javax.servlet.jsp.JspWriter _jspx_out = null;
    javax.servlet.jsp.PageContext _jspx_page_context = null;


    try {
      response.setContentType("text/html; charset=EUC-KR");
      pageContext = _jspxFactory.getPageContext(this, request, response,
      			null, true, 8192, true);
      _jspx_page_context = pageContext;
      application = pageContext.getServletContext();
      config = pageContext.getServletConfig();
      session = pageContext.getSession();
      out = pageContext.getOut();
      _jspx_out = out;

      out.write("\r\n");
      out.write("\r\n");
      out.write("    \r\n");
      jdbc.User user = null;
      user = (jdbc.User) _jspx_page_context.getAttribute("user", javax.servlet.jsp.PageContext.REQUEST_SCOPE);
      if (user == null){
        user = new jdbc.User();
        _jspx_page_context.setAttribute("user", user, javax.servlet.jsp.PageContext.REQUEST_SCOPE);
      }
      out.write('\r');
      out.write('\n');
      org.apache.jasper.runtime.JspRuntimeLibrary.introspect(_jspx_page_context.findAttribute("user"), request);
      out.write("\r\n");
      out.write("\r\n");

 	String id = request.getParameter("id"); 
	UserDao dao = UserDao.getInstance();
	user = dao.selectUser(id);
	
	boolean result = user!=null? true: false;

      out.write("\r\n");
      out.write("<html>\r\n");
      out.write("<head>\r\n");
      out.write("<meta http-equiv=\"Content-Type\" content=\"text/html; charset=EUC-KR\">\r\n");
      out.write("<title>아이디 중복 체크</title>\r\n");
      out.write("\r\n");
      out.write("<style type=\"text/css\">\r\n");
      out.write("\t#wrap {\r\n");
      out.write("\t    width: 490px;\r\n");
      out.write("\t    text-align :center;\r\n");
      out.write("\t    margin: 0 auto 0 auto;\r\n");
      out.write("\t}\r\n");
      out.write("\t\r\n");
      out.write("\t#chk{\r\n");
      out.write("\t    text-align :center;\r\n");
      out.write("\t}\r\n");
      out.write("\t\r\n");
      out.write("\t#cancelBtn{\r\n");
      out.write("\t    visibility:visible;\r\n");
      out.write("\t}\r\n");
      out.write("\t\r\n");
      out.write("\t#useBtn{\r\n");
      out.write("\t     visibility:hidden;\r\n");
      out.write("\t}\r\n");
      out.write("\t\r\n");
      out.write("\t#msg {\r\n");
      out.write("\t\tcolor : red;\r\n");
      out.write("\t}\r\n");
      out.write("</style>\r\n");
      out.write("    \r\n");
      out.write("<script type=\"text/javascript\">\r\n");
      out.write("      \r\n");
      out.write("\t// 회원가입창의 아이디 입력란의 값을 가져온다.\r\n");
      out.write("\tfunction pValue(){\r\n");
      out.write("\t    document.getElementById(\"id\").value = opener.document.regForm.id.value;\r\n");
      out.write("\t}\r\n");
      out.write("\t     \r\n");
      out.write("\t// 아이디 중복체크\r\n");
      out.write("\tfunction idCheck(){\r\n");
      out.write("\t\tvar id = document.getElementById(\"id\").value;\r\n");
      out.write("\t\t\tif(!id) {\r\n");
      out.write("\t\t\t\talert(\"아이디를 입력하지 않았습니다.\");\r\n");
      out.write("\t\t        return false;\r\n");
      out.write("\t\t\t}else {\r\n");
      out.write("\t\t\t\tcallback();\r\n");
      out.write("\t\t\t}\r\n");
      out.write("    } \r\n");
      out.write("\t     \r\n");
      out.write("     function callback(){\r\n");
      out.write("        if(");
      out.print(result );
      out.write("){\r\n");
      out.write("            document.getElementById(\"cancelBtn\").style.visibility='visible';\r\n");
      out.write("            document.getElementById(\"useBtn\").style.visibility='hidden';\r\n");
      out.write("            document.getElementById(\"msg\").innerHTML =\"사용 할 수 없는 아이디입니다.\";\r\n");
      out.write("        }else{ \r\n");
      out.write("            document.getElementById(\"cancelBtn\").style.visibility='hidden';\r\n");
      out.write("            document.getElementById(\"useBtn\").style.visibility='visible';\r\n");
      out.write("            document.getElementById(\"msg\").innerHTML = \"사용 가능한 아이디입니다.\";\r\n");
      out.write("        }\r\n");
      out.write("\t}\r\n");
      out.write("\t\r\n");
      out.write("\t// 사용하기 클릭 시 부모창으로 값 전달 \r\n");
      out.write("\tfunction sendCheckValue(){\r\n");
      out.write("\t    // 중복체크 결과인 idCheck 값을 전달한다.\r\n");
      out.write("\t    opener.document.regForm.result.value =\"idCheck\";\r\n");
      out.write("\t    // 회원가입 화면의 ID입력란에 값을 전달\r\n");
      out.write("\t    opener.document.regForm.id.value = document.getElementById(\"id\").value;\r\n");
      out.write("\t    \r\n");
      out.write("\t    if (opener != null) {\r\n");
      out.write("\t        opener.chkForm = null;\r\n");
      out.write("\t        self.close();\r\n");
      out.write("\t    }    \r\n");
      out.write("\t}    \r\n");
      out.write("</script>\r\n");
      out.write("</head>\r\n");
      out.write("\r\n");
      out.write("<body>\r\n");
      out.write("\t<div id=\"wrap\">\r\n");
      out.write("\t\t<b>아이디 중복체크</b>\r\n");
      out.write("\t\t<hr size=\"1\" width=\"460\">\r\n");
      out.write("\t\t<br>\r\n");
      out.write("\t\t<div id=\"chk\">\r\n");
      out.write("\t\t\t<form id=\"checkForm\">\r\n");
      out.write("\t\t\t\t<input type=\"text\" name=\"idinput\" id=\"id\" value=");
      out.print(id );
      out.write(">\r\n");
      out.write("\t\t\t\t<input type=\"button\" value=\"중복확인\" onclick=\"idCheck()\">\r\n");
      out.write("\t\t\t</form>\r\n");
      out.write("\t\t\t<div id=\"msg\"></div>\r\n");
      out.write("\t\t\t<br>\r\n");
      out.write("\t\t\t<input id=\"cancelBtn\" type=\"button\" value=\"취소\" onclick=\"window.close()\"><br>\r\n");
      out.write("        \t<input id=\"useBtn\" type=\"button\" value=\"사용하기\" onclick=\"sendCheckValue()\">\r\n");
      out.write("\t\t</div>\r\n");
      out.write("\t</div>\r\n");
      out.write("</body>\r\n");
    } catch (java.lang.Throwable t) {
      if (!(t instanceof javax.servlet.jsp.SkipPageException)){
        out = _jspx_out;
        if (out != null && out.getBufferSize() != 0)
          try {
            if (response.isCommitted()) {
              out.flush();
            } else {
              out.clearBuffer();
            }
          } catch (java.io.IOException e) {}
        if (_jspx_page_context != null) _jspx_page_context.handlePageException(t);
        else throw new ServletException(t);
      }
    } finally {
      _jspxFactory.releasePageContext(_jspx_page_context);
    }
  }
}
